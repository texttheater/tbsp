[]
prelude =
	import shlex

[%{name}.log]
deps = %{name}

[out/srl/baseline.%{portion}.clf]
cond = %{portion in ('dev', 'test')}
dep.oracles = out/pmb-3.0.0.en.train.gold.oracles.jsonl
dep.model = out/pmb-3.0.0.en.train.sg4g10.model
dep.tok = out/pmb-3.0.0.en.%{portion}.tok
outputs = %{target}.log
recipe =
	set -e
	mkdir -p $(dirname %{target})
	python3 decode.py en %{oracles} %{model} %{tok} --mode 3 > %{target} 2> %{target}.log

[out/srl/upperbound-%{conv}-token.%{portion}.clf]
cond = %{conv in ('drs', 'ccg') and portion in ('dev', 'test')}
dep.oracles = out/pmb-3.0.0.en.train.gold.oracles.jsonl
dep.model = out/pmb-3.0.0.en.train.sg4g10.model
dep.tok = out/pmb-3.0.0.en.%{portion}.tok
dep.roles = SRL-DRS/srl/%{conv}_elmo.%{portion}.json
outputs = %{target}.log
deps = decode.py srl.py
recipe =
	set -e
	mkdir -p $(dirname %{target})
	python3 decode.py en %{oracles} %{model} %{tok} --mode 3 --roles %{roles} --gold-roles > %{target} 2> %{target}.log

[out/srl/upperbound-%{conv}-concept.%{portion}.clf]
cond = %{conv in ('drs', 'ccg') and portion in ('dev', 'test')}
baseline = out/srl/baseline.%{portion}.clf
dep.alignments_g = SRL-DRS/alignments/gold.json
dep.alignments_bsg = SRL-DRS/alignments/gold_silver_bronze.json
dep.roles = SRL-DRS/srl/%{conv}_elmo.%{portion}.json
dep.tok = SRL-DRS/Neural_DRS/data/3.0.0/en/gold/dev.txt.raw.tok.gold
reorder = %{f' --reorder {tok}' if conv == 'drs' else ''}
outputs = %{target}.log
recipe =
	set -e
	mkdir -p $(dirname %{target})
	export PYTHONPATH=SRL-DRS
	python3 SRL-DRS/src/replace_roles_by_srl.py -i %{baseline} -a %{alignments_g} %{alignments_bsg} -r %{roles} -l%{reorder} --key srl > %{target}.log
	mv %{baseline}.fix %{target}

[out/srl/%{emb}-%{conv}-token.%{portion}.clf]
cond = %{emb in ('glove', 'elmo') and conv in ('drs', 'ccg') and portion in ('dev', 'test')}
dep.oracles = out/pmb-3.0.0.en.train.gold.oracles.jsonl
dep.model = out/pmb-3.0.0.en.train.sg4g10.model
dep.tok = out/pmb-3.0.0.en.%{portion}.tok
dep.roles = SRL-DRS/srl/%{conv}_%{emb}.%{portion}.json
outputs = %{target}.log
recipe =
	set -e
	mkdir -p $(dirname %{target})
	python3 decode.py en %{oracles} %{model} %{tok} --mode 3 --roles %{roles} --exp-key %{conv}_%{emb} > %{target} 2> %{target}.log

[SRL-DRS/Neural_DRS/data/3.0.0/en/gold/dev.txt.raw.tok.gold]
dep.clf = SRL-DRS/Neural_DRS/data/3.0.0/en/gold/dev.txt
dep.clf2tok = clf2tok.py
recipe =
	set -e
	set -o pipefail
	cat %{clf} | python %{clf2tok} > %{target}

[out/srl/%{emb}-%{conv}-concept.%{portion}.clf]
cond = %{emb in ('glove', 'elmo') and conv in ('drs', 'ccg') and portion in ('dev', 'test')}
baseline = out/srl/baseline.%{portion}.clf
dep.alignments_g = SRL-DRS/alignments/gold.json
dep.alignments_bsg = SRL-DRS/alignments/gold_silver_bronze.json
dep.roles = SRL-DRS/srl/%{conv}_%{emb}.%{portion}.json
dep.tok = SRL-DRS/Neural_DRS/data/3.0.0/en/gold/dev.txt.raw.tok.gold
reorder = %{f' --reorder {tok}' if conv == 'drs' else ''}
outputs = %{target}.log
recipe =
	set -e
	mkdir -p $(dirname %{target})
	export PYTHONPATH=SRL-DRS
	python3 SRL-DRS/src/replace_roles_by_srl.py -i %{baseline} -a %{alignments_g} %{alignments_bsg} -r %{roles} -l%{reorder} > %{target}.log
	mv %{baseline}.fix %{target}

[out/srl/%{setting}.%{portion}.eval]
cond = %{portion in ('dev', 'test')}
dep.clf = out/srl/%{setting}.%{portion}.clf
dep.gold = data/pmb-3.0.0/en/gold/%{portion}.txt
recipe = python3 ext/DRS_parsing_3/evaluation/counter.py -f1 %{clf} -f2 %{gold} -prin -ill dummy -g ext/DRS_parsing_3/evaluation/clf_signature.yaml -runs 5 > %{target}

[report]
type = task
settings = baseline upperbound-drs-token upperbound-ccg-token glove-drs-token elmo-drs-token glove-ccg-token elmo-ccg-token upperbound-drs-concept upperbound-ccg-concept glove-drs-concept elmo-drs-concept glove-ccg-concept elmo-ccg-concept
evals = %{f'out/srl/{s}.dev.eval' for s in shlex.split(settings)}
logs = %{f'out/srl/{s}.dev.clf.log' for s in shlex.split(settings)}
deps = %{evals} %{logs}
recipe =
	set -e
	set -o pipefail
	echo 'Reporting f-score and number of replacements'
	pad="                      "
	format() {
		setting=$1
		eval=out/srl/$setting.dev.eval
		log=out/srl/$setting.dev.clf.log
		setting_string="$setting$pad"
		echo -n "${setting_string:0:22} "
		tail -1 $eval | rev | cut -d ' ' -f 1 | rev | tr -d '\n'
		if [[ "$setting" == *"-concept" ]]
		then
			count=$(cat $log | grep '^Total replacements' | rev | cut -d ' ' -f 1 | rev)
		else
			count=$(cat $log | (grep '^INFO: replacing' || true) | wc -l)
		fi
		printf "%%5s\n" "$count"
	}
	format baseline
	echo
	format upperbound-drs-token
	format upperbound-ccg-token
	format glove-drs-token
	format elmo-drs-token
	format glove-ccg-token
	format elmo-ccg-token
	echo
	format upperbound-drs-concept
	format upperbound-ccg-concept
	format glove-drs-concept
	format elmo-drs-concept
	format glove-ccg-concept
	format elmo-ccg-concept
